SWAP TRANSACTION:

Alice owns Grin
Bob owns Bitcoin

INPUTS
Alice and Bob need to 
settle on amounts they want to exchange
v_B (the amount of Bitcoin)
v_G (the amount of Grin)
They also agree on timelocks for refund
(might be differnt on the two chains, therefore we need t_B and t_G)
t_B, t_G = 24h

GEN_KEYS 
Create sk,pk for Alice and Bob 
Alice needs to send her pk to Bob
Bob generates a secret preimage x used later
sk_A, pk_A <- Zp
sk_B, pk_B <- Zp
x_B <- Zp
Alice sends pk_A to Bob

LOCK_BTC
Bob creates a Bitcoin P2SH output with amount v_B 
OP_CHECKMULTISIG pk_A AND x_B*G
OP_IF t_B pk_B
Bob can spend it after t blocks or
Alice can spend it if she learns x

LOCK_GRIN_2
Alice and Bob create blinding factors
r_A, r_B <- Zp
Alice creates a Grin output with 
O_multi = r_A*G + r_B*G + v_G*H
This transaction is not signed yet!

REFUND_GRIN
Alice and Bob create a tx_ref spending
O_multi and sending it back to Alice O_ref
with timelock t_G
Alice creates rangeproof for refund output pr_ref as well as k_A, r_A for her output
Bob creates
sig_ref_b = CREATE_PART_SIG(M, k_B, r_B, k_A*G, r_A*G)
Alice finalizes the signature
sig_ref = FINALIZE_PART_SIG(M, k_A, r_A, K_B*G, r_B*G, sig_ref_b
tx_ref (O_ref, sig_ref, p_ref) is broadcast

MULTI_RANGEPROOF
Alice and Bob interact to create the Bulletproof for
details yet to be defined
pr_multi for = O_multi

LOCK_GRIN_2
Alice and Bob both create their partial signatures
sig_multi_a = CREATE_PART_SIG(M, k_A, r_A, k_B*G, r_B*G)
sig_multi = FINALIZE_PART_SIG(M, k_B, r_B, k_A*G, r_A*G, sig_multi_a)
Alice and Bob participate in MULTI_RANGEPROOF to get 
pr_multi for O_multi
tx_multi (O_multi, sig_multi, pr_multi) is broadcast

EXEC_SWAP
Alice creates tx_spend with a change output O_change with v_inp - v_G and blinding factor r_A
and sends it's r_A*G and randomness k_A*G and pr_change to Bob
Bob creates his output O_bob with v_G and blinding factor r_B and proof pr_bob
Bob creates a adaptable partial sig 
sig_b = CREATE_PARTIAL_SIG(M, k_B, r_B, k_A*G, r_A*G)
sig_b_apt = ADAPT_PARTIAL_SIG(sig_b, x);
Bob sends sig_b_apt, k_B*G, r_B*G and x*G to Alice
Alice VERF_APT_PARTIAL_SIG(M, k_A, r_A, k_B*G, r_B*G, sig_b_apt);
Alice CHECK xG pk_A Btc Output has v_B in it
Alice sig_a = CREATE_PARTIAL_SIG(M, k_A, r_A, k_B*G, r_B*G)
Alice sends sig_a to Bob
sig_swap = FINALIZE_SIG(sig_a, sig_b)
publish tx_swap (O_bob, O_change, sig_swap, pr_bob, pr_change)
Alice calcualtes
x = EXTRACT_WIT(sig_swap, sig_a, sig_b_apt);
Alice spends pk_A, x*G Bitcoin output with s
k_A and x